-- public.addax_log definition

-- Drop table

-- DROP TABLE public.addax_log;

CREATE TABLE public.addax_log (
	id bigserial NOT NULL,
	tid int8 NOT NULL,
	run_at timestamp NULL,
	run_date date NULL,
	log text NULL,
	CONSTRAINT addax_log_pkey PRIMARY KEY (id)
);
CREATE INDEX idx_tid_run_date ON public.addax_log USING btree (tid, run_at);


-- public.etl_source definition

-- Drop table

-- DROP TABLE public.etl_source;

CREATE TABLE public.etl_source (
	id serial4 NOT NULL, -- 采集源 ID
	code varchar(10) NOT NULL, -- 采集编号,一般以两个大写字母作为标志
	"name" varchar(200) NOT NULL, -- 采集源名称
	url varchar(500) NOT NULL, -- 采集源 JDBC 连接串
	username varchar(64) NULL, -- 采集源连接的账号
	pass varchar(64) NULL, -- 采集源连接的密码
	start_at time NULL, -- 采集的定时启动时间点，一般只考虑到小时和分钟，秒钟默认为 0
	prerequisite varchar(4000) NULL, -- 能否开始采集的先决条件，比如获取采集标志位，或者等待数据不再更新，一般是一段 SQL，然后通过返回值真假进行判断
	pre_script varchar(4000) NULL, -- 标志符合条件后的前置脚本
	remark varchar(2000) NULL, -- 系统备注信息
	enabled bool DEFAULT true NULL, -- 是否有效
	CONSTRAINT etl_source_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.etl_source IS '采集源表';

-- Column comments

COMMENT ON COLUMN public.etl_source.id IS '采集源 ID';
COMMENT ON COLUMN public.etl_source.code IS '采集编号,一般以两个大写字母作为标志';
COMMENT ON COLUMN public.etl_source."name" IS '采集源名称';
COMMENT ON COLUMN public.etl_source.url IS '采集源 JDBC 连接串';
COMMENT ON COLUMN public.etl_source.username IS '采集源连接的账号';
COMMENT ON COLUMN public.etl_source.pass IS '采集源连接的密码';
COMMENT ON COLUMN public.etl_source.start_at IS '采集的定时启动时间点，一般只考虑到小时和分钟，秒钟默认为 0';
COMMENT ON COLUMN public.etl_source.prerequisite IS '能否开始采集的先决条件，比如获取采集标志位，或者等待数据不再更新，一般是一段 SQL，然后通过返回值真假进行判断';
COMMENT ON COLUMN public.etl_source.pre_script IS '标志符合条件后的前置脚本';
COMMENT ON COLUMN public.etl_source.remark IS '系统备注信息';
COMMENT ON COLUMN public.etl_source.enabled IS '是否有效';


-- public.etl_soutab definition

-- Drop table

-- DROP TABLE public.etl_soutab;

CREATE TABLE public.etl_soutab (
	sou_db_conn varchar(64) NOT NULL,
	"owner" varchar(64) NOT NULL,
	table_name varchar(64) NOT NULL,
	column_name varchar(64) NOT NULL,
	data_type varchar(64) NULL,
	data_length int8 NULL,
	data_precision int4 NULL,
	data_scale int4 NULL,
	column_id int4 NULL,
	table_type varchar(32) NULL,
	tab_comment varchar(2000) NULL,
	col_comment varchar(2000) NULL,
	dw_clt_date timestamp DEFAULT CURRENT_TIMESTAMP NULL,
	tid varchar(32) NOT NULL,
	CONSTRAINT pk_tid_colname_idx PRIMARY KEY (tid, column_name)
);


-- public.etl_statistic definition

-- Drop table

-- DROP TABLE public.etl_statistic;

CREATE TABLE public.etl_statistic (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL, -- 逻辑主键
	tid int8 NULL, -- 采集表主键
	start_at timestamp NULL, -- 采集开始时间
	end_at timestamp NULL, -- 采集结束时间
	take_secs int4 NULL, -- 采集耗时
	total_bytes int4 NULL, -- 采集的总字节数
	byte_speed int4 NULL, -- 采集速度  字节/秒
	rec_speed int4 NULL, -- 采集速度 行/秒
	total_recs int8 NULL, -- 采集的总行数
	total_errors int4 NULL, -- 采集时发生错误的行数
	run_date date DEFAULT CURRENT_DATE NOT NULL, -- 运行时的日期
	CONSTRAINT tb_addax_statistic_pkey PRIMARY KEY (id)
);
CREATE UNIQUE INDEX idx_sta_tid ON public.etl_statistic USING btree (tid, run_date);
COMMENT ON TABLE public.etl_statistic IS '采集统计表';

-- Column comments

COMMENT ON COLUMN public.etl_statistic.id IS '逻辑主键';
COMMENT ON COLUMN public.etl_statistic.tid IS '采集表主键';
COMMENT ON COLUMN public.etl_statistic.start_at IS '采集开始时间';
COMMENT ON COLUMN public.etl_statistic.end_at IS '采集结束时间';
COMMENT ON COLUMN public.etl_statistic.take_secs IS '采集耗时';
COMMENT ON COLUMN public.etl_statistic.total_bytes IS '采集的总字节数';
COMMENT ON COLUMN public.etl_statistic.byte_speed IS '采集速度  字节/秒';
COMMENT ON COLUMN public.etl_statistic.rec_speed IS '采集速度 行/秒';
COMMENT ON COLUMN public.etl_statistic.total_recs IS '采集的总行数';
COMMENT ON COLUMN public.etl_statistic.total_errors IS '采集时发生错误的行数';
COMMENT ON COLUMN public.etl_statistic.run_date IS '运行时的日期';


-- public."groups" definition

-- Drop table

-- DROP TABLE public."groups";

CREATE TABLE public."groups" (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	group_name varchar(50) NOT NULL,
	CONSTRAINT groups_pkey PRIMARY KEY (id)
);


-- public.notification definition

-- Drop table

-- DROP TABLE public.notification;

CREATE TABLE public.notification (
	id bigserial NOT NULL, -- 自动生成，无需理会
	phone varchar(255) NOT NULL, -- 接收人号码或者其他唯一标识，用逗号分隔
	msg varchar(500) NOT NULL, -- 消息内容
	sms bpchar(1) DEFAULT 'Y'::bpchar NOT NULL, -- 是否发送短信，发送成功后置为y
	im bpchar(1) DEFAULT 'Y'::bpchar NOT NULL, -- 是否发送企微，发送成功后置为y
	"call" bpchar(1) DEFAULT 'N'::bpchar NOT NULL, -- 是否拨打语音，拨打成功后置为y
	create_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL, -- 消息生成的时间，自动生成
	CONSTRAINT notification_pkey PRIMARY KEY (id)
);
COMMENT ON TABLE public.notification IS '数据中心消息提醒总表';

-- Column comments

COMMENT ON COLUMN public.notification.id IS '自动生成，无需理会';
COMMENT ON COLUMN public.notification.phone IS '接收人号码或者其他唯一标识，用逗号分隔';
COMMENT ON COLUMN public.notification.msg IS '消息内容';
COMMENT ON COLUMN public.notification.sms IS '是否发送短信，发送成功后置为y';
COMMENT ON COLUMN public.notification.im IS '是否发送企微，发送成功后置为y';
COMMENT ON COLUMN public.notification."call" IS '是否拨打语音，拨打成功后置为y';
COMMENT ON COLUMN public.notification.create_at IS '消息生成的时间，自动生成';


-- public.sys_dict definition

-- Drop table

-- DROP TABLE public.sys_dict;

CREATE TABLE public.sys_dict (
	code int4 NOT NULL, -- 条目编号
	"name" varchar(255) NULL, -- 条目名称
	classification varchar(2000) NULL, -- 分类
	remark varchar(500) NULL, -- 说明
	CONSTRAINT pk_tb_dict PRIMARY KEY (code)
);
COMMENT ON TABLE public.sys_dict IS '字典条目表';

-- Column comments

COMMENT ON COLUMN public.sys_dict.code IS '条目编号';
COMMENT ON COLUMN public.sys_dict."name" IS '条目名称';
COMMENT ON COLUMN public.sys_dict.classification IS '分类';
COMMENT ON COLUMN public.sys_dict.remark IS '说明';


-- public.users definition

-- Drop table

-- DROP TABLE public.users;

CREATE TABLE public.users (
	username varchar(50) NOT NULL,
	"password" varchar(500) NOT NULL,
	enabled bool NOT NULL,
	CONSTRAINT users_pkey PRIMARY KEY (username)
);


-- public.authorities definition

-- Drop table

-- DROP TABLE public.authorities;

CREATE TABLE public.authorities (
	username varchar(50) NOT NULL,
	authority varchar(50) NOT NULL,
	CONSTRAINT fk_authorities_users FOREIGN KEY (username) REFERENCES public.users(username)
);
CREATE UNIQUE INDEX ix_auth_username ON public.authorities USING btree (username, authority);


-- public.etl_table definition

-- Drop table

-- DROP TABLE public.etl_table;

CREATE TABLE public.etl_table (
	id int8 DEFAULT nextval('tb_imp_etl_tid_seq'::regclass) NOT NULL, -- 表 ID
	source_db varchar(32) NOT NULL, -- 采集源库名或 schema名称或 owner 名称
	source_table varchar(64) NOT NULL, -- 采集源表名
	target_db varchar(50) NOT NULL, -- 目标库名，即提供给 hive 的库名
	target_table varchar(200) NOT NULL, -- 目标表名，即 Hive 的表名
	part_kind bpchar(1) DEFAULT 'D'::bpchar NULL, -- 分区类型，D - 按每日分区，如果为空，则表示不分区
	part_name varchar(20) DEFAULT 'logdate'::character varying NULL, -- 目标表分区字段名称，如果 dest_part_kind 不为空，则该字段也不能为空
	"filter" varchar(2000) DEFAULT '1=1'::character varying NOT NULL, -- 采集过滤条件，即 where 条件
	kind bpchar(1) DEFAULT 'A'::bpchar NULL, -- 采集类型: A - 自动采集(默认值); M - 手工采集; R - 实时采集
	retry_cnt int4 DEFAULT 3 NULL, -- 采集的重试次数，用于采集失败时，可以多次尝试
	start_time timestamp DEFAULT CURRENT_TIMESTAMP NULL, -- 本次采集的开始时间
	end_time timestamp DEFAULT CURRENT_TIMESTAMP NULL, -- 本次采集的结束时间
	max_runtime int4 DEFAULT 2000 NULL, -- 采集可只持续的最大时间，避免某些采集因为网络或数据源原因一直无法结束
	sid int4 NOT NULL, -- 采集源 ID，对应 etl_source 表 id
	duration int4 DEFAULT 0 NOT NULL, -- 采集耗时，单位为秒
	part_format varchar(10) DEFAULT 'yyyyMMdd'::character varying NULL, -- 分区字段日期格式
	storage_format varchar(10) DEFAULT 'orc'::character varying NOT NULL, -- 压缩格式，可以是snappy,zlib,lz4,gz,bz2,zstd 等
	compress_format varchar(10) DEFAULT 'snappy'::character varying NOT NULL,
	tbl_comment varchar(500) NULL, -- 表注释
	status bpchar(1) DEFAULT 'U'::bpchar NOT NULL,
	CONSTRAINT tb_imp_etl_pkey1 PRIMARY KEY (id),
	CONSTRAINT etl_table_sid_fk FOREIGN KEY (sid) REFERENCES public.etl_source(id)
);
COMMENT ON TABLE public.etl_table IS '采集表信息';

-- Column comments

COMMENT ON COLUMN public.etl_table.id IS '表 ID';
COMMENT ON COLUMN public.etl_table.source_db IS '采集源库名或 schema名称或 owner 名称';
COMMENT ON COLUMN public.etl_table.source_table IS '采集源表名';
COMMENT ON COLUMN public.etl_table.target_db IS '目标库名，即提供给 hive 的库名';
COMMENT ON COLUMN public.etl_table.target_table IS '目标表名，即 Hive 的表名';
COMMENT ON COLUMN public.etl_table.part_kind IS '分区类型，D - 按每日分区，如果为空，则表示不分区';
COMMENT ON COLUMN public.etl_table.part_name IS '目标表分区字段名称，如果 dest_part_kind 不为空，则该字段也不能为空';
COMMENT ON COLUMN public.etl_table."filter" IS '采集过滤条件，即 where 条件';
COMMENT ON COLUMN public.etl_table.kind IS '采集类型: A - 自动采集(默认值); M - 手工采集; R - 实时采集';
COMMENT ON COLUMN public.etl_table.retry_cnt IS '采集的重试次数，用于采集失败时，可以多次尝试';
COMMENT ON COLUMN public.etl_table.start_time IS '本次采集的开始时间';
COMMENT ON COLUMN public.etl_table.end_time IS '本次采集的结束时间';
COMMENT ON COLUMN public.etl_table.max_runtime IS '采集可只持续的最大时间，避免某些采集因为网络或数据源原因一直无法结束';
COMMENT ON COLUMN public.etl_table.sid IS '采集源 ID，对应 etl_source 表 id';
COMMENT ON COLUMN public.etl_table.duration IS '采集耗时，单位为秒';
COMMENT ON COLUMN public.etl_table.part_format IS '分区字段日期格式';
COMMENT ON COLUMN public.etl_table.storage_format IS '压缩格式，可以是snappy,zlib,lz4,gz,bz2,zstd 等';
COMMENT ON COLUMN public.etl_table.tbl_comment IS '表注释';


-- public.group_authorities definition

-- Drop table

-- DROP TABLE public.group_authorities;

CREATE TABLE public.group_authorities (
	group_id int8 NOT NULL,
	authority varchar(50) NOT NULL,
	CONSTRAINT fk_group_authorities_group FOREIGN KEY (group_id) REFERENCES public."groups"(id)
);


-- public.group_members definition

-- Drop table

-- DROP TABLE public.group_members;

CREATE TABLE public.group_members (
	id int8 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 9223372036854775807 START 1 CACHE 1 NO CYCLE) NOT NULL,
	username varchar(50) NOT NULL,
	group_id int8 NOT NULL,
	CONSTRAINT group_members_pkey PRIMARY KEY (id),
	CONSTRAINT fk_group_members_group FOREIGN KEY (group_id) REFERENCES public."groups"(id)
);


-- public.sys_item definition

-- Drop table

-- DROP TABLE public.sys_item;

CREATE TABLE public.sys_item (
	dict_code int4 NOT NULL, -- 字典条目编号
	item_key varchar(255) NOT NULL, -- 明细名称
	item_value varchar(2000) NULL, -- 明细内容
	remark varchar(4000) NULL, -- 备注
	CONSTRAINT pk_tb_dictionary PRIMARY KEY (dict_code, item_key),
	CONSTRAINT tb_item_dict_fk FOREIGN KEY (dict_code) REFERENCES public.sys_dict(code) ON DELETE CASCADE ON UPDATE CASCADE
);
COMMENT ON TABLE public.sys_item IS '字典明细表';

-- Column comments

COMMENT ON COLUMN public.sys_item.dict_code IS '字典条目编号';
COMMENT ON COLUMN public.sys_item.item_key IS '明细名称';
COMMENT ON COLUMN public.sys_item.item_value IS '明细内容';
COMMENT ON COLUMN public.sys_item.remark IS '备注';


-- public.etl_column definition

-- Drop table

-- DROP TABLE public.etl_column;

CREATE TABLE public.etl_column (
	tid int8 NOT NULL, -- 采集表主键 ID，对应 tb_etl_table 中的 tid
	column_name varchar(255) NULL, -- 原表字段名称
	column_id int4 NULL, -- 列 ID，用于排序字段
	source_type varchar(64) NULL, -- 源表的数据类型
	data_length int4 NULL, -- 数据长度
	data_precision int4 NULL, -- 精度
	data_scale int4 NULL, -- 小数位
	col_comment varchar(4000) NULL, -- 字段注释
	target_type varchar(50) NOT NULL, -- 目标表对应的类型
	target_type_full varchar(100) NULL, -- 目标表字段的完整类型，比如 decimal(10,3)
	update_at timestamp DEFAULT CURRENT_TIMESTAMP NULL, -- 更新时间
	CONSTRAINT etl_column_tid_fk FOREIGN KEY (tid) REFERENCES public.etl_table(id)
);
CREATE UNIQUE INDEX uk_tid_column_name ON public.etl_column USING btree (tid, column_name);
COMMENT ON TABLE public.etl_column IS '采集的表字段信息，包括源表和目标表';

-- Column comments

COMMENT ON COLUMN public.etl_column.tid IS '采集表主键 ID，对应 tb_etl_table 中的 tid';
COMMENT ON COLUMN public.etl_column.column_name IS '原表字段名称';
COMMENT ON COLUMN public.etl_column.column_id IS '列 ID，用于排序字段';
COMMENT ON COLUMN public.etl_column.source_type IS '源表的数据类型';
COMMENT ON COLUMN public.etl_column.data_length IS '数据长度';
COMMENT ON COLUMN public.etl_column.data_precision IS '精度';
COMMENT ON COLUMN public.etl_column.data_scale IS '小数位';
COMMENT ON COLUMN public.etl_column.col_comment IS '字段注释';
COMMENT ON COLUMN public.etl_column.target_type IS '目标表对应的类型';
COMMENT ON COLUMN public.etl_column.target_type_full IS '目标表字段的完整类型，比如 decimal(10,3)';
COMMENT ON COLUMN public.etl_column.update_at IS '更新时间';


-- public.etl_job definition

-- Drop table

-- DROP TABLE public.etl_job;

CREATE TABLE public.etl_job (
	tid int8 NOT NULL, -- 采集表主键
	job text NOT NULL, -- addax 任务模板
	CONSTRAINT pk_tb_job PRIMARY KEY (tid),
	CONSTRAINT etl_job_tid_fk FOREIGN KEY (tid) REFERENCES public.etl_table(id)
);
COMMENT ON TABLE public.etl_job IS '采集表的 addax 任务模板';

-- Column comments

COMMENT ON COLUMN public.etl_job.tid IS '采集表主键';
COMMENT ON COLUMN public.etl_job.job IS 'addax 任务模板';


-- public.etl_jour definition

-- Drop table

-- DROP TABLE public.etl_jour;

CREATE TABLE public.etl_jour (
	id bigserial NOT NULL,
	tid int8 NULL,
	kind varchar(32) NULL,
	start_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
	duration int4 DEFAULT 0 NOT NULL,
	status bool DEFAULT true NULL,
	cmd text NULL,
	error_msg varchar(4000) NULL,
	CONSTRAINT etl_jour_pkey PRIMARY KEY (id),
	CONSTRAINT etl_jour_tid_fk FOREIGN KEY (tid) REFERENCES public.etl_table(id)
);
CREATE INDEX idx_etl_jour_tid ON public.etl_jour USING btree (tid);


-- public.vw_etl_table_with_source source

CREATE OR REPLACE VIEW public.vw_etl_table_with_source
AS SELECT t.id,
    t.source_db,
    t.source_table,
    t.target_db,
    t.target_table,
    t.part_kind,
    t.part_name,
    t.filter,
    t.kind,
    t.retry_cnt,
    t.start_time,
    t.end_time,
    t.max_runtime,
    t.sid,
    t.duration,
    t.part_format,
    t.storage_format,
    t.compress_format,
    t.tbl_comment,
    t.status,
    s.code,
    s.name,
    s.url,
    s.username,
    s.pass,
    s.start_at,
    s.enabled
   FROM etl_table t
     LEFT JOIN etl_source s ON t.sid = s.id;